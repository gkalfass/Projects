# -*- coding: utf-8 -*-
"""fcc_predict_health_costs_with_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bzEYwFoh_bbDDpgHuYFoodlAgOQbA6cI
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dropout
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

def sex_to_integer(sex):
  if sex == 'male':
    return 1
  else:
    return 0

def smoker_to_integer(smoker):
  if smoker == 'yes':
    return 1
  else:
    return 0

def region_to_integer(region):
  if region == 'northeast':
    return 0
  elif region == 'northwest':
    return 1
  elif region == 'southeast':
    return 2
  else:
    return 3

dataset['sex'] = dataset['sex'].apply(sex_to_integer)
dataset['smoker'] = dataset['smoker'].apply(smoker_to_integer)
dataset['region'] = dataset['region'].apply(region_to_integer)

target = dataset.pop('expenses')

from sklearn.model_selection import train_test_split
train_dataset, test_dataset, train_labels, test_labels = train_test_split(dataset, target, test_size=0.2, random_state=0)

model = Sequential()
model.add(layers.Dense(64, activation='relu', input_shape=[6,]))
model.add(Dropout(0.2))
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(1))

model.compile(
    optimizer='adam',
    loss='mae',
    metrics=['mae','mse']
)
model.summary()

history = model.fit(
    train_dataset,
    train_labels,
    epochs = 300,
    batch_size = 32,
    validation_data = (test_dataset,test_labels)
)

# RUN THIS CELL TO TEST YOUR MODEL. DO NOT MODIFY CONTENTS.
# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)