# -*- coding: utf-8 -*-
"""fcc_sms_text_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gkHK1OwuYJrqFdQUBhJrf91h1mD1_q5z
"""

# import libraries
try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

import pandas as pd

with open(train_file_path,mode='r') as train_data:
  lines = [lines.split('\t') for lines in train_data]

with open(test_file_path,mode='r') as valid_data:
  test_lines = [lines.split('\t') for lines in valid_data]

labels = [line[0] for line in lines]
texts = [line[1].replace('\n','') for line in lines]

test_labels = [line[0] for line in test_lines]
test_texts = [line[1].replace('\n','') for line in test_lines]

training_data = pd.DataFrame()
test_data = pd.DataFrame()

training_data['label'] = labels
training_data['text'] = texts

test_data['label'] = test_labels
test_data['text'] = test_texts

def label_to_int(label):
  if label == 'ham':
    return 0
  else:
    return 1

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

tfidf = TfidfVectorizer()

X_train = tfidf.fit_transform(training_data['text'])

training_data['label'] = training_data['label'].apply(label_to_int)
test_data['label'] = test_data['label'].apply(label_to_int)

model = LogisticRegression(random_state=0)
model.fit(X_train,training_data['label'])
predictions = model.predict(tfidf.transform(test_data['text']))

model.predict(tfidf.transform([test_data['text'][4]]))[0]

# function to predict messages based on model
# (should return list containing prediction and label, ex. [0.008318834938108921, 'ham'])
def predict_message(pred_text):
  prediction = []
  prediction.append(model.predict(tfidf.transform([pred_text]))[0])
  prediction.append('ham' if model.predict(tfidf.transform([pred_text]))[0]==0 else 'spam')



  return (prediction)

pred_text = "how are you doing today?"

prediction = predict_message(pred_text)
print(prediction)

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):
    prediction = predict_message(msg)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()