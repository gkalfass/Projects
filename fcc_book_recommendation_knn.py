# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11nr9VwVM8zvwMhZHNUa7ZTLbi-HqYO22
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

n_users = (df_ratings['user'].value_counts()>=200).sum()

users = []
for i in df_ratings['user'].value_counts()[:n_users].index:
  users.append(i)

df_ratings = df_ratings[df_ratings['user'].isin(users) == True]

n_books = (df_ratings['isbn'].value_counts()>=100).sum()

books = []
for i in df_ratings['isbn'].value_counts()[:n_books].index:
  books.append(i)

df_ratings = df_ratings[df_ratings['isbn'].isin(books) == True]

df_ratings

df_books

df = df_ratings.join(df_books.set_index('isbn'), on='isbn',how='left')

df.drop(['isbn','author'],axis=1,inplace=True)

df = df.pivot(index='title',columns='user',values='rating')

df.fillna(0,inplace=True)

df = df.drop(index=(df.index[0]))

df

neigh = NearestNeighbors(n_neighbors=5, metric='cosine')
neigh.fit(df)

book_title = "White Oleander : A Novel (Oprah's Book Club)"
df[df.index == book_title]

neigh.kneighbors(df[df.index == book_title], 5, return_distance=True)

df.index[96]

# function to return recommended books - this will be tested
def get_recommends(book = ""):

  recommended_books = neigh.kneighbors(df[df.index == book_title], 5, return_distance=True)

  return [df.index[recommended_books[1][0][0]],
   [[df.index[recommended_books[1][0][1]],recommended_books[0][0][1]],
    [df.index[recommended_books[1][0][2]],recommended_books[0][0][2],
     [df.index[recommended_books[1][0][3]],recommended_books[0][0][3]],
      [df.index[recommended_books[1][0][4]],recommended_books[0][0][4]]]]]

recommended_books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(recommended_books)

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()